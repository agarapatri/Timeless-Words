# CSS (assets/styles.css)
# JS (assets/app.js, assets/search.js, etc.)
# Fonts (assets/fonts/*.woff2)
# Images/icons (icons/*.svg, *.png, etc.)
# are cached heavily. HTML files update immediately, so you don’t need a version there.

# This GitHub Actions workflow file automates cache busting and deployment of the documentation site.
# It triggers on pushes to the main branch, replacing all instances of {{VERSION}} in HTML
# and CSS files within the docs directory with the current commit hash, ensuring that users
# always receive the latest versions of assets. Finally, it deploys the updated docs to Git
# Compute DB_VERSION from the SQLite file’s SHA-256. If the DB doesn’t change, the hash stays the same, so no cache-bust.

name: Cache Busting & Deploy

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify artifacts exist
        run: |
          test -f docs/assets/data/library.{{DB_VERSION}}.sqlite || true
          test -f docs/assets/data/library.sqlite || true
          test -d docs/assets/data/semantic || { echo "docs/assets/data/semantic not found"; exit 1; }

      - name: Compute versions
        shell: bash
        run: |
          set -euo pipefail

          APP_VERSION="${GITHUB_SHA::8}"

          # Primary DB path: prefer unversioned if present, else fall back to templated name after replacement step.
          DB_PATH="docs/assets/data/library.sqlite"
          if [ ! -f "$DB_PATH" ] && ls docs/assets/data/library.*.sqlite >/dev/null 2>&1; then
            DB_PATH="$(ls docs/assets/data/library.*.sqlite | head -n1)"
          fi

          if [ -f "$DB_PATH" ]; then
            DB_VERSION="$(sha256sum "$DB_PATH" | awk '{print $1}' | cut -c1-12)"
          else
            DB_VERSION="devdb000000"
          fi

          SEM_DIR="docs/assets/data/semantic"
          SEM_VERSION="$(
            find "$SEM_DIR" -type f -print0 \
            | sort -z \
            | xargs -0 sha256sum \
            | sha256sum \
            | awk '{print $1}' \
            | cut -c1-12
          )"

          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          echo "DB_VERSION=$DB_VERSION"   >> "$GITHUB_ENV"
          echo "SEM_VERSION=$SEM_VERSION" >> "$GITHUB_ENV"

      - name: Replace placeholders in assets
        run: |
          set -euo pipefail

          replace_all() {
            local placeholder="$1" value="$2"
            shift 2
            for pattern in "$@"; do
              find docs -type f -name "$pattern" -exec sed -i "s|${placeholder}|${value}|g" {} +
            done
          }

          replace_all '{{VERSION}}'     "$APP_VERSION" '*.html' '*.css' '*.js' '*.json'
          replace_all '{{DB_VERSION}}'  "$DB_VERSION"  '*.html' '*.css' '*.js' '*.json'
          replace_all '{{SEM_VERSION}}' "$SEM_VERSION" '*.html' '*.css' '*.js' '*.json'

      - name: Stage versioned DB copy (optional immutable hosting)
        run: |
          set -euo pipefail
          SRC="docs/assets/data/library.sqlite"
          if [ -f "$SRC" ]; then
            DEST="docs/assets/data/library.${DB_VERSION}.sqlite"
            [ -f "$DEST" ] || cp "$SRC" "$DEST"
            echo "Staged $DEST"
          fi

      - name: Verify replacements
        run: |
          set -euo pipefail
          ! grep -R "{{VERSION}}" docs || { echo "Unreplaced {{VERSION}}"; exit 1; }
          ! grep -R "{{DB_VERSION}}" docs || { echo "Unreplaced {{DB_VERSION}}"; exit 1; }
          ! grep -R "{{SEM_VERSION}}" docs || { echo "Unreplaced {{SEM_VERSION}}"; exit 1; }

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs
